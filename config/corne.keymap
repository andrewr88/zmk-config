/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/* Layer definitions - Mac Mode (0-7) and Windows Mode (8-15) */
#define MAC_BASE    0
#define MAC_SYMB    1
#define MAC_NUM     2
#define MAC_FUN     3
#define MAC_NAV     4
#define MAC_NAVWIN  5
#define MAC_NAVLH   6
#define MAC_MDIA    7

#define WIN_BASE    8
#define WIN_SYMB    9
#define WIN_NUM     10
#define WIN_FUN     11
#define WIN_NAV     12
#define WIN_NAVWIN  13
#define WIN_NAVLH   14
#define WIN_MDIA    15

/* Custom keycodes - Mac versions */
#define MAC_OS_SHFT            &sk LSHFT
#define MAC_OS_CTRL            &sk LCTRL
#define MAC_OS_ALT             &sk LALT
#define MAC_OS_GUI             &sk LGUI

/* Custom keycodes - Windows versions (GUI and CTRL swapped) */
#define WIN_OS_SHFT            &sk LSHFT
#define WIN_OS_CTRL            &sk LGUI  // Windows "Ctrl" is GUI key
#define WIN_OS_ALT             &sk LALT
#define WIN_OS_GUI             &sk LCTRL  // Windows "GUI" is Ctrl key

/* Common behaviors */
#define SW_APP             &swapper_alt_tab  // Alt+Tab for window switching
#define SW_WIN             &swapper_cmd_grave  // Cmd+` for Mac window switching
#define PRV_TAB            &kp LC(LS(TAB))
#define NXT_TAB            &kp LC(TAB)

/* Mac shortcuts */
#define MAC_CLS_WIN        &kp LG(W)
#define MAC_UNDO           &kp LG(Z)
#define MAC_CUT            &kp LG(X)
#define MAC_COPY           &kp LG(C)
#define MAC_PSTE           &kp LG(V)
#define MAC_REDO           &kp LG(LS(Z))
#define MAC_NWTB           &kp LG(T)
#define MAC_MKLNK          &kp LG(K)
#define MAC_SELECT_ALL     &kp LG(A)
#define MAC_VSC_EVAL       &kp LG(LS(E))
#define MAC_DWRD           &kp LA(BSPC)

/* Windows/Linux shortcuts */
#define WIN_CLS_WIN        &kp LC(W)
#define WIN_UNDO           &kp LC(Z)
#define WIN_CUT            &kp LC(X)
#define WIN_COPY           &kp LC(C)
#define WIN_PSTE           &kp LC(V)
#define WIN_REDO           &kp LC(Y)
#define WIN_NWTB           &kp LC(T)
#define WIN_MKLNK          &kp LC(K)
#define WIN_SELECT_ALL     &kp LC(A)
#define WIN_VSC_EVAL       &kp LC(LS(E))
#define WIN_DWRD           &kp LC(BSPC)

/* Common custom behaviors */
#define OS_TOGGLE          &os_toggle  // Toggle between Mac and Windows mode
#define REV_COLON          &rev_colon
#define LEFT_ENCLOSE       &left_enclose
#define RIGHT_ENCLOSE      &right_enclose
#define THREE_GRAVE        &three_grave

/* Custom behaviors */
/ {
    behaviors {
        // OS toggle: Switch between Mac (layers 0-7) and Windows (layers 8-15) mode
        os_toggle: os_toggle {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&to WIN_BASE>, <&to MAC_BASE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Swapper behavior for Alt+Tab functionality
        swapper_alt_tab: swapper_alt_tab {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
            timeout-ms = <3000>;
        };

        // Swapper behavior for Cmd+` functionality  
        swapper_cmd_grave: swapper_cmd_grave {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp GRAVE>, <&kt LGUI>;
            timeout-ms = <3000>;
        };

        // Reversed colon/semicolon (colon by default, semicolon with shift)
        rev_colon: reversed_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Left enclosure behavior (parenthesis by default, brace with shift)
        left_enclose: left_enclosure {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp LBRC>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Right enclosure behavior (parenthesis by default, brace with shift)
        right_enclose: right_enclosure {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&kp RBRC>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Three backticks macro
        three_grave: three_grave_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp GRAVE &kp GRAVE &kp GRAVE>;
        };

        // Custom mod-tap with longer tapping term for space - Mac version
        lt_sp_mac: layer_tap_space_mac {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        // Custom mod-tap with longer tapping term for space - Windows version
        lt_sp_win: layer_tap_space_win {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // Mac mode combos
        combo_nei_ctrl_mac {
            timeout-ms = <50>;
            key-positions = <16 17 18>; // N E I positions (3x6 layout with offset)
            bindings = <&sk LCTRL>;
            layers = <MAC_BASE MAC_SYMB MAC_NUM MAC_FUN MAC_NAV MAC_NAVWIN MAC_NAVLH>;
        };

        combo_commadot_semicolon_mac {
            timeout-ms = <50>;
            key-positions = <33 34>; // Comma and Dot positions (3x6 layout with offset)
            bindings = <&kp SEMI>;
            layers = <MAC_BASE MAC_SYMB MAC_NUM MAC_FUN MAC_NAV MAC_NAVWIN MAC_NAVLH>;
        };

        combo_hcomma_hyphen_mac {
            timeout-ms = <50>;
            key-positions = <16 33>; // H and Comma positions (3x6 layout with offset)
            bindings = <&kp MINUS>;
            layers = <MAC_BASE MAC_SYMB MAC_NUM MAC_FUN MAC_NAV MAC_NAVWIN MAC_NAVLH>;
        };

        combo_zd_tab_mac {
            timeout-ms = <50>;
            key-positions = <25 15>; // Z and D positions (3x6 layout with offset)
            bindings = <&kp TAB>;
            layers = <MAC_BASE MAC_SYMB MAC_NUM MAC_FUN MAC_NAV MAC_NAVWIN MAC_NAVLH>;
        };

        combo_xd_ctrl_mac {
            timeout-ms = <50>;
            key-positions = <26 15>; // X and D positions (3x6 layout with offset)
            bindings = <&sk LCTRL>;
            layers = <MAC_BASE MAC_SYMB MAC_NUM MAC_FUN MAC_NAV MAC_NAVWIN MAC_NAVLH>;
        };

        combo_dh_ctrl_mac {
            timeout-ms = <50>;
            key-positions = <15 18>; // D and H positions (3x6 layout with offset)
            bindings = <&sk LCTRL>;
            layers = <MAC_BASE MAC_SYMB MAC_NUM MAC_FUN MAC_NAV MAC_NAVWIN MAC_NAVLH>;
        };

        combo_prev_next_select_all_mac {
            timeout-ms = <50>;
            key-positions = <4 5>; // R and T positions (3x6 layout with offset)
            bindings = <&kp LG(A)>;
            layers = <MAC_BASE MAC_SYMB MAC_NUM MAC_FUN MAC_NAV MAC_NAVWIN MAC_NAVLH>;
        };

        // Windows mode combos (identical positions, different bindings)
        combo_nei_ctrl_win {
            timeout-ms = <50>;
            key-positions = <16 17 18>; // N E I positions (3x6 layout with offset)
            bindings = <&sk LGUI>;
            layers = <WIN_BASE WIN_SYMB WIN_NUM WIN_FUN WIN_NAV WIN_NAVWIN WIN_NAVLH>;
        };

        combo_commadot_semicolon_win {
            timeout-ms = <50>;
            key-positions = <33 34>; // Comma and Dot positions (3x6 layout with offset)
            bindings = <&kp SEMI>;
            layers = <WIN_BASE WIN_SYMB WIN_NUM WIN_FUN WIN_NAV WIN_NAVWIN WIN_NAVLH>;
        };

        combo_hcomma_hyphen_win {
            timeout-ms = <50>;
            key-positions = <16 33>; // H and Comma positions (3x6 layout with offset)
            bindings = <&kp MINUS>;
            layers = <WIN_BASE WIN_SYMB WIN_NUM WIN_FUN WIN_NAV WIN_NAVWIN WIN_NAVLH>;
        };

        combo_zd_tab_win {
            timeout-ms = <50>;
            key-positions = <25 15>; // Z and D positions (3x6 layout with offset)
            bindings = <&kp TAB>;
            layers = <WIN_BASE WIN_SYMB WIN_NUM WIN_FUN WIN_NAV WIN_NAVWIN WIN_NAVLH>;
        };

        combo_xd_ctrl_win {
            timeout-ms = <50>;
            key-positions = <26 15>; // X and D positions (3x6 layout with offset)
            bindings = <&sk LGUI>;
            layers = <WIN_BASE WIN_SYMB WIN_NUM WIN_FUN WIN_NAV WIN_NAVWIN WIN_NAVLH>;
        };

        combo_dh_ctrl_win {
            timeout-ms = <50>;
            key-positions = <15 18>; // D and H positions (3x6 layout with offset)
            bindings = <&sk LGUI>;
            layers = <WIN_BASE WIN_SYMB WIN_NUM WIN_FUN WIN_NAV WIN_NAVWIN WIN_NAVLH>;
        };

        combo_prev_next_select_all_win {
            timeout-ms = <50>;
            key-positions = <4 5>; // R and T positions (3x6 layout with offset)
            bindings = <&kp LC(A)>;
            layers = <WIN_BASE WIN_SYMB WIN_NUM WIN_FUN WIN_NAV WIN_NAVWIN WIN_NAVLH>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // MAC MODE LAYERS (0-7)
        mac_base_layer {
            bindings = <
            &trans     &kp Q      &kp W      &kp E       &kp R       &kp T         &kp Y       &kp U       &kp I       &kp O       &kp P      &trans
            &trans     &kp A      &kp S      &kp D       &kp F       &kp G         &kp H       &kp J       &kp K       &kp L       &lt MAC_MDIA SEMI &trans
            &trans     &kp Z      &kp X      &kp C       &kp V       &kp B         &kp N       &kp M       &kp COMMA   &kp DOT     &kp FSLH   &trans
                                  &mo MAC_FUN &mo MAC_NUM &lt_sp_mac MAC_NAV SPACE   &sk LSHFT &mo MAC_NAV &mo MAC_SYMB
            >;
        };

        mac_symb_layer {
            bindings = <
            &trans     &kp MINUS  &kp UNDER   &kp EQUAL   &kp PLUS    &kp BSLH      &kp LG(Z)    &kp AMPS    &kp ASTRK   &kp DOT     &kp LG(V)  &trans
            &trans     &kp SQT    &kp DQT     &left_enclose &right_enclose &kp GRAVE    &rev_colon   &sk LSHFT &sk LCTRL &sk LALT  &sk LGUI   &trans
            &trans     &kp SEMI   &kp COLON   &kp LBKT    &kp RBKT    &three_grave   &kp MINUS   &kp EXCL    &kp LT      &kp GT      &kp QMARK  &trans
                                  &trans      &trans      &kp RET                   &trans      &trans      &trans
            >;
        };

        mac_num_layer {
            bindings = <
            &trans     &kp TAB    &kp LEFT    &kp DOT     &kp RIGHT   &kp UNDER     &kp LG(LS(E)) &kp N7     &kp N8      &kp N9      &kp PLUS   &trans
            &trans     &sk LGUI &sk LALT  &sk LCTRL &sk LSHFT &mo MAC_NAV   &rev_colon   &kp N4      &kp N5      &kp N6      &kp MINUS  &trans
            &trans     &kp LG(Z)   &trans      &kp COMMA   &rev_colon   &kp LG(LS(Z))      &kp MINUS   &kp N1      &kp N2      &kp N3      &trans     &trans
                                  &trans      &trans      &trans                    &kp RET     &kp BSPC    &kp N0
            >;
        };

        mac_fun_layer {
            bindings = <
            &trans     &kp N1     &kp N2      &kp N3      &kp N4      &kp N5        &to MAC_NAVLH &kp F7    &kp F8      &kp F9      &kp F12    &trans
            &trans     &sk LGUI &sk LALT  &sk LCTRL &sk LSHFT &trans        &trans      &kp F4      &kp F5      &kp F6      &kp F11    &trans
            &trans     &kp N6     &kp N7      &kp N8      &kp N9      &kp N0        &trans      &kp F1      &kp F2      &kp F3      &kp F10    &trans
                                  &trans      &trans      &trans                    &trans      &kp CAPSLOCK    &trans
            >;
        };

        mac_nav_layer {
            bindings = <
            &trans     &swapper_cmd_grave     &kp LC(LS(TAB))     &kp LG(W) &kp LC(TAB)     &swapper_alt_tab        &kp PG_UP   &kp HOME    &kp UP      &kp END     &kp LA(BSPC) &trans
            &trans     &sk LGUI &sk LALT  &sk LCTRL &sk LSHFT &sl MAC_NAVWIN &kp PG_DN  &kp LEFT    &kp DOWN    &kp RIGHT   &kp SPACE    &trans
            &trans     &kp LG(Z)   &kp LG(X)     &kp LG(C)    &kp LG(V)    &kp LG(LS(Z))      &kp ESC     &kp BSPC    &kp RET     &kp TAB     &kp DEL      &trans
                                  &kp LG(K)   &trans      &kp LG(T)                  &kp RET     &kp BSPC    &lt MAC_MDIA SEMI
            >;
        };

        mac_navwin_layer {
            bindings = <
            &trans     &kp LA(Q)  &kp LA(W)   &kp LA(F)   &kp LA(P)   &kp LA(B)     &kp LA(J)   &kp LA(N7)  &kp LA(N8)  &kp LA(N9)  &kp LA(SQT) &trans
            &trans     &sk LGUI &sk LALT  &sk LCTRL &sk LSHFT &trans        &kp LA(M)   &kp LA(N4)  &kp LA(N5)  &kp LA(N6)  &kp LA(O)   &trans
            &trans     &kp LA(Z)  &kp LA(X)   &kp LA(C)   &kp LA(D)   &kp LA(V)     &kp LA(K)   &kp LA(N1)  &kp LA(N2)  &kp LA(N3)  &kp LA(FSLH) &trans
                                  &trans      &trans      &trans                    &trans      &trans      &trans
            >;
        };

        mac_navlh_layer {
            bindings = <
            &trans     &to MAC_BASE &kp HOME  &kp UP      &kp END     &kp PG_UP     &trans      &trans      &trans      &trans      &trans     &trans
            &trans     &kp SPACE  &kp LEFT    &kp DOWN    &kp RIGHT   &kp PG_DN     &trans      &sk LSHFT &sk LCTRL &sk LALT  &sk LGUI   &trans
            &trans     &kp DEL    &kp TAB     &kp RET     &kp BSPC    &kp ESC       &trans      &trans      &trans      &trans      &trans     &trans
                                  &to MAC_BASE &to MAC_BASE &trans                  &kp RET     &kp BSPC    &trans
            >;
        };

        // MAC MEDIA LAYER (7)
        mac_mdia_layer {
            bindings = <
            &trans     &bootloader &trans &os_toggle &trans &trans       &trans &kp C_PREV &kp C_VOL_UP &kp C_NEXT &trans      &trans
            &trans     &sk LGUI &sk LALT &sk LCTRL &sk LSHFT &trans   &trans &kp C_VOL_DN &kp C_PP &kp C_MUTE &trans      &trans
            &trans     &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR   &trans &trans &trans &trans &trans      &trans
                                       &trans &trans &trans                     &trans &trans &trans
            >;
        };

        // WINDOWS MODE LAYERS (8-14)
        win_base_layer {
            bindings = <
            &trans     &kp Q      &kp W      &kp E       &kp R       &kp T         &kp Y       &kp U       &kp I       &kp O       &kp P      &trans
            &trans     &kp A      &kp S      &kp D       &kp F       &kp G         &kp H       &kp J       &kp K       &kp L       &lt WIN_MDIA SEMI &trans
            &trans     &kp Z      &kp X      &kp C       &kp V       &kp B         &kp N       &kp M       &kp COMMA   &kp DOT     &kp FSLH   &trans
                                  &mo WIN_FUN &mo WIN_NUM &lt_sp_win WIN_NAV SPACE   &sk LSHFT &mo WIN_NAV &mo WIN_SYMB
            >;
        };

        win_symb_layer {
            bindings = <
            &trans     &kp MINUS  &kp UNDER   &kp EQUAL   &kp PLUS    &kp BSLH      &kp LC(Z)    &kp AMPS    &kp ASTRK   &kp DOT     &kp LC(V)  &trans
            &trans     &kp SQT    &kp DQT     &left_enclose &right_enclose &kp GRAVE    &rev_colon   &sk LSHFT &sk LGUI &sk LALT  &sk LCTRL  &trans
            &trans     &kp SEMI   &kp COLON   &kp LBKT    &kp RBKT    &three_grave   &kp MINUS   &kp EXCL    &kp LT      &kp GT      &kp QMARK  &trans
                                  &trans      &trans      &kp RET                   &trans      &trans      &trans
            >;
        };

        win_num_layer {
            bindings = <
            &trans     &kp TAB    &kp LEFT    &kp DOT     &kp RIGHT   &kp UNDER     &kp LC(LS(E)) &kp N7     &kp N8      &kp N9      &kp PLUS   &trans
            &trans     &sk LCTRL &sk LALT  &sk LGUI &sk LSHFT &mo WIN_NAV   &rev_colon   &kp N4      &kp N5      &kp N6      &kp MINUS  &trans
            &trans     &kp LC(Z)   &trans      &kp COMMA   &rev_colon   &kp LC(Y)      &kp MINUS   &kp N1      &kp N2      &kp N3      &trans     &trans
                                  &trans      &trans      &trans                    &kp RET     &kp BSPC    &kp N0
            >;
        };

        win_fun_layer {
            bindings = <
            &trans     &kp N1     &kp N2      &kp N3      &kp N4      &kp N5        &to WIN_NAVLH &kp F7    &kp F8      &kp F9      &kp F12    &trans
            &trans     &sk LCTRL &sk LALT  &sk LGUI &sk LSHFT &trans        &trans      &kp F4      &kp F5      &kp F6      &kp F11    &trans
            &trans     &kp N6     &kp N7      &kp N8      &kp N9      &kp N0        &trans      &kp F1      &kp F2      &kp F3      &kp F10    &trans
                                  &trans      &trans      &trans                    &trans      &kp CAPSLOCK    &trans
            >;
        };

        win_nav_layer {
            bindings = <
            &trans     &swapper_cmd_grave     &kp LC(LS(TAB))     &kp LC(W) &kp LC(TAB)     &swapper_alt_tab        &kp PG_UP   &kp HOME    &kp UP      &kp END     &kp LC(BSPC) &trans
            &trans     &sk LCTRL &sk LALT  &sk LGUI &sk LSHFT &sl WIN_NAVWIN &kp PG_DN  &kp LEFT    &kp DOWN    &kp RIGHT   &kp SPACE    &trans
            &trans     &kp LC(Z)   &kp LC(X)     &kp LC(C)    &kp LC(V)    &kp LC(Y)      &kp ESC     &kp BSPC    &kp RET     &kp TAB     &kp DEL      &trans
                                  &kp LC(K)   &trans      &kp LC(T)                  &kp RET     &kp BSPC    &lt WIN_MDIA SEMI
            >;
        };

        win_navwin_layer {
            bindings = <
            &trans     &kp LA(Q)  &kp LA(W)   &kp LA(F)   &kp LA(P)   &kp LA(B)     &kp LA(J)   &kp LA(N7)  &kp LA(N8)  &kp LA(N9)  &kp LA(SQT) &trans
            &trans     &sk LCTRL &sk LALT  &sk LGUI &sk LSHFT &trans        &kp LA(M)   &kp LA(N4)  &kp LA(N5)  &kp LA(N6)  &kp LA(O)   &trans
            &trans     &kp LA(Z)  &kp LA(X)   &kp LA(C)   &kp LA(D)   &kp LA(V)     &kp LA(K)   &kp LA(N1)  &kp LA(N2)  &kp LA(N3)  &kp LA(FSLH) &trans
                                  &trans      &trans      &trans                    &trans      &trans      &trans
            >;
        };

        win_navlh_layer {
            bindings = <
            &trans     &to WIN_BASE &kp HOME  &kp UP      &kp END     &kp PG_UP     &trans      &trans      &trans      &trans      &trans     &trans
            &trans     &kp SPACE  &kp LEFT    &kp DOWN    &kp RIGHT   &kp PG_DN     &trans      &sk LSHFT &sk LGUI &sk LALT  &sk LCTRL  &trans
            &trans     &kp DEL    &kp TAB     &kp RET     &kp BSPC    &kp ESC       &trans      &trans      &trans      &trans      &trans     &trans
                                  &to WIN_BASE &to WIN_BASE &trans                  &kp RET     &kp BSPC    &trans
            >;
        };

        // WINDOWS MEDIA LAYER (15)
        win_mdia_layer {
            bindings = <
            &trans     &bootloader &trans &os_toggle &trans &trans       &trans &kp C_PREV &kp C_VOL_UP &kp C_NEXT &trans      &trans
            &trans     &sk LCTRL &sk LALT &sk LGUI &sk LSHFT &trans   &trans &kp C_VOL_DN &kp C_PP &kp C_MUTE &trans      &trans
            &trans     &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR   &trans &trans &trans &trans &trans      &trans
                                       &trans &trans &trans                     &trans &trans &trans
            >;
        };
    };
};
