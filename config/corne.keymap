/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

/* Layer definitions */
#define BASE    0
#define SYMB    1
#define NUM     2
#define FUN     3
#define NAV     4
#define NAVWIN  5
#define NAVLH   6
#define MDIA    7

/* Custom keycodes */
#define OS_SHFT            &sk LSHFT
#define OS_CTRL            &sk LCTRL
#define OS_ALT             &sk LALT
#define OS_GUI             &sk LGUI
#define SW_APP             &swapper LALT TAB  // Alt+Tab for window switching
#define SW_WIN             &swapper LGUI GRAVE  // Cmd+` for Mac window switching
#define PRV_TAB            &kp LC(LS(TAB))
#define NXT_TAB            &kp LC(TAB)
#define CLS_WIN            &kp LG(W)   // Cmd+W (use Cmd by default, can be changed manually)
#define MW_UNDO            &kp LG(Z)   // Cmd+Z 
#define MW_CUT             &kp LG(X)   // Cmd+X 
#define MW_COPY            &kp LG(C)   // Cmd+C 
#define MW_PSTE            &kp LG(V)   // Cmd+V 
#define MW_REDO            &kp LG(LS(Z)) // Cmd+Shift+Z
#define MW_NWTB            &kp LG(T)   // Cmd+T 
#define MW_MKLNK           &kp LG(K)   // Cmd+K 
#define MW_SELECT_ALL      &kp LG(A)   // Cmd+A 
#define VSC_EVAL           &kp LG(LS(E)) // Cmd+Shift+E
#define KC_DWRD            &kp LA(BSPC)  // Alt+Backspace
#define OS_TOGGLE          &os_toggle  // Toggle between Mac and Windows mode
#define REV_COLON          &rev_colon
#define LEFT_ENCLOSE       &left_enclose
#define RIGHT_ENCLOSE      &right_enclose
#define THREE_GRAVE        &three_grave

/* Custom behaviors */
/ {
    behaviors {
        // OS toggle: Switch between Mac and Windows mode
        os_toggle: os_toggle {
            compatible = "zmk,behavior-tap-dance";
            label = "OS_TOGGLE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&out OUT_TOG>, <&out OUT_TOG>;
        };

        // Implements a behavior similar to the QMK swapper feature
        swapper: swapper {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER";
            #binding-cells = <2>;
            bindings = <&kt>, <&kp>, <&kt>;
            timeout-ms = <3000>;
        };

        // Reversed colon/semicolon (colon by default, semicolon with shift)
        rev_colon: reversed_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "REVERSED_COLON";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Left enclosure behavior (parenthesis by default, brace with shift)
        left_enclose: left_enclosure {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_ENCLOSE";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp LBRC>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Right enclosure behavior (parenthesis by default, brace with shift)
        right_enclose: right_enclosure {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_ENCLOSE";
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&kp RBRC>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Three backticks macro
        three_grave: three_grave_macro {
            compatible = "zmk,behavior-macro";
            label = "THREE_GRAVE";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp GRAVE &kp GRAVE &kp GRAVE>;
        };

        // Custom mod-tap with longer tapping term for space
        lt_sp: layer_tap_space {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_SPACE";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        // Mod-tap with permissive hold
        mt_p: mod_tap_permissive {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_PERMISSIVE";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";
        
        combo_nei_ctrl {
            timeout-ms = <50>;
            key-positions = <15 16 17>; // N E I positions (3x5 layout)
            bindings = <OS_CTRL>;
        };

        combo_commadot_semicolon {
            timeout-ms = <50>;
            key-positions = <27 28>; // Comma and Dot positions (3x5 layout)
            bindings = <&kp SEMI>;
        };

        combo_hcomma_hyphen {
            timeout-ms = <50>;
            key-positions = <15 27>; // H and Comma positions (3x5 layout)
            bindings = <&kp MINUS>;
        };

        combo_zd_tab {
            timeout-ms = <50>;
            key-positions = <20 12>; // Z and D positions (3x5 layout: Z=20, D=12)
            bindings = <&kp TAB>;
        };

        combo_xd_ctrl {
            timeout-ms = <50>;
            key-positions = <21 12>; // X and D positions (3x5 layout: X=21, D=12)
            bindings = <OS_CTRL>;
        };

        combo_dh_ctrl {
            timeout-ms = <50>;
            key-positions = <12 15>; // D and H positions (3x5 layout: D=12, H=15)
            bindings = <OS_CTRL>;
        };

        combo_prev_next_select_all {
            timeout-ms = <50>;
            key-positions = <3 4>; // R and T positions (3x5 layout)
            bindings = <MW_SELECT_ALL>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
            &kp Q      &kp W      &kp E       &kp R       &kp T         &kp Y       &kp U       &kp I       &kp O       &kp P           
            &kp A      &kp S      &kp D       &kp F       &kp G         &kp H       &kp J       &kp K       &kp L       &lt MDIA SEMI   
            &kp Z      &kp X      &kp C       &kp V       &kp B         &kp N       &kp M       &kp COMMA   &kp DOT     &kp FSLH        
                        &mo FUN    &mo NUM     &lt_sp NAV SPACE          OS_SHFT     &mo NAV     &mo SYMB
            >;
        };

        symb_layer {
            bindings = <
            &kp MINUS  &kp UNDER   &kp EQUAL   &kp PLUS    &kp BSLH      MW_UNDO     &kp AMPS    &kp ASTRK   &kp DOT     MW_PSTE         
            &kp SQT    &kp DQT     LEFT_ENCLOSE RIGHT_ENCLOSE &kp GRAVE    REV_COLON   OS_SHFT     OS_CTRL     OS_ALT      OS_GUI          
            &kp SEMI   &kp COLON   &kp LBKT    &kp RBKT    THREE_GRAVE   &kp MINUS   &kp EXCL    &kp LT      &kp GT      &kp QMARK       
                        &trans      &trans      &kp RET                   &trans      &trans      &trans
            >;
        };

        num_layer {
            bindings = <
            &kp TAB    &kp LEFT    &kp DOT     &kp RIGHT   &kp UNDER     VSC_EVAL    &kp N7      &kp N8      &kp N9      &kp PLUS        
            OS_GUI     OS_ALT      OS_CTRL     OS_SHFT     &mo NAV       REV_COLON   &kp N4      &kp N5      &kp N6      &kp MINUS       
            MW_UNDO    &trans      &kp COMMA   REV_COLON   MW_REDO       &kp MINUS   &kp N1      &kp N2      &kp N3      &trans          
                        &trans      &trans      &trans                    &kp RET     &kp BSPC    &kp N0
            >;
        };

        fun_layer {
            bindings = <
            &kp N1     &kp N2      &kp N3      &kp N4      &kp N5        &to NAVLH   &kp F7      &kp F8      &kp F9      &kp F12         
            OS_GUI     OS_ALT      OS_CTRL     OS_SHFT     &trans        &trans      &kp F4      &kp F5      &kp F6      &kp F11         
            &kp N6     &kp N7      &kp N8      &kp N9      &kp N0        &trans      &kp F1      &kp F2      &kp F3      &kp F10         
                        &trans      &trans      &trans                    &trans      &kp CAPS    &trans
            >;
        };

        nav_layer {
            bindings = <
            SW_WIN     PRV_TAB     CLS_WIN     NXT_TAB     SW_APP        &kp PG_UP   &kp HOME    &kp UP      &kp END     KC_DWRD         
            OS_GUI     OS_ALT      OS_CTRL     OS_SHFT     &sl NAVWIN    &kp PG_DN   &kp LEFT    &kp DOWN    &kp RIGHT   &kp SPACE       
            MW_UNDO    MW_CUT      MW_COPY     MW_PSTE     MW_REDO       &kp ESC     &kp BSPC    &kp RET     &kp TAB     &kp DEL         
                        MW_MKLNK    &trans      MW_NWTB                   &kp RET     &kp BSPC    &lt MDIA SEMI
            >;
        };

        navwin_layer {
            bindings = <
            &kp LA(Q)  &kp LA(W)   &kp LA(F)   &kp LA(P)   &kp LA(B)     &kp LA(J)   &kp LA(N7)  &kp LA(N8)  &kp LA(N9)  &kp LA(SQT)     
            OS_GUI     OS_ALT      OS_CTRL     OS_SHFT     &trans        &kp LA(M)   &kp LA(N4)  &kp LA(N5)  &kp LA(N6)  &kp LA(O)       
            &kp LA(Z)  &kp LA(X)   &kp LA(C)   &kp LA(D)   &kp LA(V)     &kp LA(K)   &kp LA(N1)  &kp LA(N2)  &kp LA(N3)  &kp LA(FSLH)    
                        &trans      &trans      &trans                    &trans      &trans      &trans
            >;
        };

        navlh_layer {
            bindings = <
            &to BASE   &kp HOME    &kp UP      &kp END     &kp PG_UP     &trans      &trans      &trans      &trans      &trans          
            &kp SPACE  &kp LEFT    &kp DOWN    &kp RIGHT   &kp PG_DN     &trans      OS_SHFT     OS_CTRL     OS_ALT      OS_GUI          
            &kp DEL    &kp TAB     &kp RET     &kp BSPC    &kp ESC       &trans      &trans      &trans      &trans      &trans          
                        &to BASE    &to BASE    &trans                    &kp RET     &kp BSPC    &trans
            >;
        };

        mdia_layer {
            bindings = <
            &bootloader &trans     OS_TOGGLE   &trans      &trans        &kp C_AC_SCROLL_UP &kp C_PREV  &kp C_MS_UP &kp C_NEXT &kp PSCRN       
            OS_GUI     OS_ALT      OS_CTRL     OS_SHFT     &trans        &kp C_AC_SCROLL_DOWN &kp C_MS_LEFT &kp C_MS_DOWN &kp C_MS_RIGHT &trans    
            &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR        &kp C_MUTE  &kp C_VOL_DN &kp C_PP   &kp C_VOL_UP &trans          
                        &trans      &trans      &trans                    &mkp MB3    &mkp MB1    &mkp MB2
            >;
        };
    };
};
